<?xml version="1.0"?>
<ruleset name="Geniem Project">
  <description>A custom set of rules to check for a Geniem WordPress project</description>

  <exclude-pattern>/wp/wp-admin/*</exclude-pattern>
  <exclude-pattern>/wp/wp-includes/*</exclude-pattern>
  <exclude-pattern>/wp/wp-*.php</exclude-pattern>
  <exclude-pattern>/wp/index.php</exclude-pattern>
  <exclude-pattern>/wp/xmlrpc.php</exclude-pattern>
  <exclude-pattern>/wp/</exclude-pattern>
  <exclude-pattern>*.twig</exclude-pattern>

  <exclude-pattern>/mu-plugins/bedrock-autoloader.php</exclude-pattern>

  <exclude-pattern>/tests/</exclude-pattern>

  <exclude-pattern>db/seeds/</exclude-pattern>
  <exclude-pattern>db/migrations/</exclude-pattern>
  <exclude-pattern>app/install.php</exclude-pattern>

  <!-- There MUST NOT be more than one statement per line. -->
  <rule ref="Generic.Formatting.DisallowMultipleStatements"/>

  <!-- Disallow tabs altogether -->
  <rule ref="Generic.WhiteSpace.DisallowTabIndent.TabsUsed"/>

  <!-- Use 2 spaces for indentation -->
  <arg name="tab-width" value="2"/>
  <rule ref="PEAR.WhiteSpace.ScopeIndent">
    <properties>
      <property name="indent" value="2"/>
    </properties>
  </rule>

  <!--
    The soft limit on line length MUST be 120 characters
    automated style checkers MUST warn but MUST NOT error at the soft limit.
  -->
  <rule ref="Generic.Files.LineLength">
    <properties>
      <property name="lineLimit" value="100"/>
      <property name="absoluteLineLimit" value="0"/>
    </properties>
  </rule>

  <!-- All PHP files MUST use the Unix LF (linefeed) line ending. -->
  <rule ref="Generic.Files.LineEndings">
    <properties>
      <property name="eolChar" value="\n"/>
    </properties>
  </rule>

  <!-- Method arguments with default values MUST go at the end of the argument list. -->
  <rule ref="PEAR.Functions.ValidDefaultValue"/>

  <rule ref="Squiz.PHP.CommentedOutCode"/>
  <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>

  <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
  <rule ref="Generic.Commenting.Todo"/>
  <rule ref="Generic.ControlStructures.InlineControlStructure"/>

  <!-- no spaces before comma in function calls -->
  <rule ref="Generic.Functions.FunctionCallArgumentSpacing.SpaceBeforeComma"/>

  <!-- Closing brackets can be really painful to debug. Just disallow them -->
  <rule ref="PSR2.Files.ClosingTag.NotAllowed"/>

  <!-- <?php tags and constants (true,false,null) need to be lowercase  -->
  <rule ref="Generic.PHP.LowerCaseKeyword"/>
  <rule ref="Generic.PHP.LowerCaseConstant"/>

  <!-- We may also want to to include all the rules in a standard -->
  <rule ref="WordPress">
    <!--
    We may want a middle ground though. The best way to do this is add the
    entire ruleset, then rule by rule, remove ones that don't suit a project. We
    can do this by running `phpcs` with the '-s' flag, to see the names of the
    different Sniffs, as their rules are broken. From here, we can opt to
    exclude problematic sniffs like so.
    -->

    <!-- These are nice but don't have any idea of context -->
    <exclude name="WordPress.VIP.ValidatedSanitizedInput.MissingUnslash" />
    <exclude name="WordPress.VIP.ValidatedSanitizedInput.InputNotSanitized" />

    <!-- Exclude indentation rules and use PEAR.WhiteSpace.ScopeIndent instead -->
    <exclude name="Generic.WhiteSpace.ScopeIndent" />

    <!-- Use spaces instead of tabs -->
    <exclude name="Generic.WhiteSpace.DisallowSpaceIndent.SpacesUsed" />

    <!-- Package Tag seems unimportant in plugins -->
    <exclude name="Squiz.Commenting.FileComment.MissingPackageTag" />

    <!-- We use so many static classes so class comment isn't really helpful -->
    <exclude name="Squiz.Commenting.ClassComment.Missing" />

    <!-- This just makes commenting a lot more painful, even small comments are good -->
    <exclude name="Squiz.Commenting.InlineComment.InvalidEndChar" />

    <!-- Don't care if function calls have spaces after brackets or not -->
    <!-- this is because __('word') looks better than __( 'word' ) -->
    <exclude name="PEAR.Functions.FunctionCallSignature.SpaceAfterOpenBracket" />
    <exclude name="PEAR.Functions.FunctionCallSignature.SpaceBeforeCloseBracket" />
  </rule>

</ruleset>
