##
# Nodejs container which installs and builds all frontend assets
##
#frontend:
#  image: devgeniem/node-assets-builder
#  volumes_from:
#    - data
#  command: /bin/bash -c "cd /var/www/project/web/app/themes/THEMENAME && npm install && ./node_modules/webpack/bin/webpack.js"

##
# Docker for Mac is super slow for the filesync, So we'll use unison instead
##
data:
  image: onnimonni/unison:2.48.4
  environment:
    UNISON_DIR: /var/www/project
    UNISON_UID: 1000
    UNISON_GID: 1001
  volumes:
    - /var/www/project
  ports:
    - "5000"
  hostname: "data-container"
##
# Web Server which runs nginx+php
##
web:
  image: devgeniem/wordpress-development-server
  ports:
    - 80
  links:
    - db
    - redis
  volumes_from:
    - data
  volumes:
    # In production uploads will be in /data/uploads/
    # This way let the container see them like in production
    - ./.docker/uploads:/var/www/uploads
  environment:
    # Small variable to tell if we are in production,testing or development
    # Don't use this in your code unless this is only option
    # We want to nearly identical codebase in production and development
    WP_ENV: development

    WP_UID: 1000
    WP_GID: 1001

    # Set php to use redis for object cache & sessions
    PHP_SESSION_HANDLER: redis
    PHP_SESSION_REDIS_DB: 0
    WP_REDIS_DATABASE: 1

    # These will be mapped automatically in development to jwilder/nginx-proxy
    VIRTUAL_HOST:  wordpress.test

    # This creates https certificate automatically when using gdev
    HTTPS_HOST: wordpress.test

    # Set project WP_SITEURL & HOME
    WP_SITEURL: https://wordpress.test
    WP_HOME: https://wordpress.test

    DB_NAME: wordpress
    DB_USER: wordpress
    DB_PASSWORD: wordpress
    SMTP_FROM: no-reply@wordpress.test

##
# PHP builder which install composer packages and wordpress database
# - This can be used for testing the project and running wp-cli commands
##
backend:
  image: devgeniem/wordpress-project-builder
  links:
    - db
    - redis
    - web
  volumes_from:
    - data
  # Run one time command to install composer and seed database
  command: /bin/bash -c "composer install; ./scripts/seed.sh"
  # Add siteurl into etc/hosts inside docker container to run the rspec tests correctly
  extra_hosts:
    - "wordpress.test:172.17.0.1"

##
# Use basic mariadb container for database
##
db:
  image: mariadb
  volumes:
    # Make database persistent
    - /var/lib/mysql
  environment:
    MYSQL_DATABASE: wordpress
    MYSQL_USER: wordpress
    MYSQL_PASSWORD: wordpress
    MYSQL_ROOT_PASSWORD: root

##
# We use redis for wp object cache and php sessions
##
redis:
  image: redis
