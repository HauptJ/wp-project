# Use custom workspace in /var/www/project
workspace:
  base: /var/www
  path: project

# Use mysql and redis
services:
  database:
    image: mysql
    environment:
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress
      MYSQL_ALLOW_EMPTY_PASSWORD: yes

  cache:
    image: redis

pipeline:
  ##
  # Check for easy mistakes as soon as possible
  ##
  prepare:
    image: devgeniem/wordpress-server:debian-php7.0
    environment:
      WP_ENV: testing
      CERT_DOMAIN: '*.wordpress.test'
      CERT_PATH: nginx/environments/testing/http
    commands:
      # For debugging
      - php --version

      # Install and run codesniffer when phpcs.xml is present
      - '[ -f phpcs.xml ] && composer create-project wp-coding-standards/wpcs --no-dev /opt/wpcs && /opt/wpcs/vendor/bin/phpcs --extensions=php --standard=phpcs.xml .'

      # Generate self-signed ssl certificate
      - openssl req -new -newkey rsa:1024 -days 7300 -nodes -x509 -subj "/CN=$CERT_DOMAIN" -keyout $CERT_PATH/default.key -out $CERT_PATH/default.crt
  ##
  # Build assets defined with webpack in all themes
  ##
  webpack:
    image: devgeniem/node-assets-builder
    commands:
      - find ./web/app/themes/ -mindepth 1 -maxdepth 1 -type d -exec node_install_and_build_webpack {} \;
  ##
  # Start the web container as detached process
  ##
  web:
    image: devgeniem/wordpress-server:debian-php7.0
    detach: true
    pull: true
    entrypoint: /bin/bash
    command:
      - /init
    environment:
      # Use normal web port for the container
      PORT: 80
      # Allow custom configs for testing environment
      WP_ENV: testing
      # Set project SERVER_NAME, WP_SITEURL & WP_HOME
      SERVER_NAME: wordpress.test
      WP_HOME: http://wordpress.test
      WP_SITEURL: http://wordpress.test
      SMTP_FROM: no-reply@wordpress.test
      # Mysql details
      MYSQL_HOST: 127.0.0.1
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PWD: wordpress
      # Use redis as object cache
      REDIS_HOST: 127.0.0.1
      # Set php to use redis for object cache & sessions
      PHP_SESSION_HANDLER: redis
      PHP_SESSION_REDIS_DB: 0
  ##
  # Install composer and WP database
  ##
  build:
    image: devgeniem/wordpress-server:debian-php7.0
    pull: true
    environment:
      # Allow custom configs for testing environment
      WP_ENV: testing
      # Set project SERVER_NAME, WP_SITEURL & WP_HOME
      SERVER_NAME: wordpress.test
      WP_HOME: http://wordpress.test
      WP_SITEURL: http://wordpress.test
      SMTP_FROM: no-reply@wordpress.test
      # Mysql details
      MYSQL_HOST: 127.0.0.1
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PWD: wordpress
      # Use redis as object cache
      REDIS_HOST: 127.0.0.1
      # Set php to use redis for object cache & sessions
      PHP_SESSION_HANDLER: redis
      PHP_SESSION_REDIS_DB: 0

      WEB_USER: wordpress
      WEB_GROUP: web
      WEB_UID: 1000
      WEB_GID: 1001

      # Use these credentials for WordPress
      WP_ADMIN_PASSWORD: admin
      WP_ADMIN_USER: admin
    commands:
      # Install php dependencies
      - ./scripts/install.sh

      # Create the lesser user needed for wp-cli
      - addgroup --system --gid $WEB_GID $WEB_GROUP
      - adduser --system --gid $WEB_GID --uid $WEB_UID $WEB_USER

      # Setup database
      - ./scripts/seed.sh

      # Create some dummy content so that rss and sitemaps will work
      - wp post generate --count=10
  ##
  # Run integration tests with phantomjs & ruby rspec
  ##
  test:
    image: devgeniem/poltergeist
    environment:
      WP_TEST_URL: https://wordpress.test
      # Use these to login to WordPress
      WP_TEST_USER: admin
      WP_TEST_USER_PASS: admin
    commands:
      # Fake wordpress.test domain
      - echo "127.0.0.1 wordpress.test" >> /etc/hosts

      # Put self-generated certificate into trusted certificates
      - cp nginx/environments/testing/http/default.crt /usr/local/share/ca-certificates/
      - update-ca-certificates

      # Test the site with phantomjs
      - ./scripts/test.sh
  ##
  # Publish to Flynn stage
  # - This uses flynn credentials automatically which are defined with $ drone global secret
  # - Following env need to be set: FLYNN_DOMAIN, FLYNN_KEY, FLYNN_TLSPIN
  ##
  deploy_staging:
    image: devgeniem/drone-flynn-docker-push:staging
    pull: true
    privileged: true
    environment:
      FLYNN_APP: test
    when:
      branch: master
  ##
  # Publish to Flynn production
  # - This uses flynn credentials automatically which are defined with $ drone global secret
  # - Following env need to be set: FLYNN_DOMAIN, FLYNN_KEY, FLYNN_TLSPIN
  ##
  deploy_production:
    image: devgeniem/drone-flynn-docker-push:production
    pull: true
    privileged: true
    environment:
      FLYNN_APP: test
    when:
      branch: stable
